import { useState, useEffect } from 'react';
import personService from './services/persons';
import './App.css';

import Filter from './components/Filter';
import PersonsForm from './components/PersonsForm';
import Listings from './components/Listings';

const App = () => {
  // State
  const [persons, setPersons] = useState([]);
  const [newName, setNewName] = useState('');
  const [newNumber, setNewNumber] = useState('');
  const [filter, setFilter] = useState('');

  // Fetch data
  useEffect(() => {
    personService
      .getAll()
      .then((initialPersons) => {
        setPersons(initialPersons);
      })
      .catch((error) => {
        alert(`Unexpected error: ${JSON.stringify(error.response.data.error)}`);
      });
  }, []);

  // Filter persons by name or number
  const personsToShow = persons.filter((person) => {
    return (
      person.name.toLowerCase().includes(filter.toLowerCase()) ||
      person.number.includes(filter)
    );
  });

  const addListing = (event) => {
    event.preventDefault();
    // Validation
    if (newName === '') {
      alert('Please enter a name.');
      return;
    }
    if (newNumber === '') {
      alert('Please enter a number.');
      return;
    }
    // If person already exists, update number
    const existingPerson = persons.find((person) => person.name === newName);
    if (existingPerson) {
      if (
        existingPerson.number !== newNumber &&
        window.confirm(
          `${newName} already exists. Do you want to update the phone number?`
        )
      ) {
        const updatedPerson = { ...existingPerson, number: newNumber };
        updateListing(existingPerson.id, updatedPerson);
        return;
      }

      if (existingPerson.number === newNumber) {
        alert(`${newName} has already been added.`);
        return;
      }
    }

    // Add new person
    const person = {
      name: newName,
      number: newNumber,
      // id: persons.length + 1, // ID is generated by the server
    };

    // Add to server
    personService
      .create(person)
      .then((returnedPerson) => {
        setPersons(persons.concat(returnedPerson));

        // Reset form
        setNewName('');
        setNewNumber('');
      })
      .catch((error) => {
        alert(`Unexpected error: ${JSON.stringify(error.response.data.error)}`);
      });
  };

  const removeListing = (id) => {
    const person = persons.find((person) => person.id === id);
    if (window.confirm(`Delete ${person.name}?`)) {
      personService
        .remove(id)
        .then(() => {
          setPersons(persons.filter((person) => person.id !== id));
        })
        .catch((error) => {
          alert(
            `Unexpected error: ${JSON.stringify(error.response.data.error)}`
          );
        });
    }
  };

  const updateListing = (id, updatedPerson) => {
    personService
      .update(id, updatedPerson)
      .then((returnedPerson) => {
        setPersons(
          persons.map((person) => (person.id !== id ? person : returnedPerson))
        );
      })
      .catch((error) => {
        alert(`Unexpected error: ${JSON.stringify(error.response.data.error)}`);
      });
  };

  const handleNameChange = (event) => {
    setNewName(event.target.value);
  };

  const handleNumberChange = (event) => {
    setNewNumber(event.target.value);
  };

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
  };

  return (
    <div>
      <h1>Phonebook</h1>
      <Filter
        filter={filter}
        onChange={handleFilterChange}
      />
      <h2>Add a new listing</h2>
      <PersonsForm
        name={newName}
        onNameChange={handleNameChange}
        number={newNumber}
        onNumberChange={handleNumberChange}
        onSubmit={addListing}
      />
      <h2>Numbers</h2>
      <Listings
        persons={personsToShow}
        onDelete={removeListing}
      />
    </div>
  );
};

export default App;
